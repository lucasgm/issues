#roles/deploy_service/tasks/health_only_linux.yml
- name: Build health list (Linux) 
  ansible.builtin.set_fact:
    _health_cmds_raw: >-
      {{
        phase_services | map(attribute='containers') | sum(start=[])
        | map(attribute='serviceCommands') | select('defined')
        | map(attribute='health') | reject('equalto', None)
        | map('trim') | reject('equalto','') | list
      }}

- name: Debug raw health commands before fix
  ansible.builtin.debug:
    var: _health_cmds_raw

- name: Prepare encoded health commands (execute as-is via wrapper)
  ansible.builtin.set_fact:
    _health_cmds_b64: "{{ _health_cmds_raw | map('b64encode') | list }}"

- block:
    - name: (check) would health-check (Linux)
      ansible.builtin.debug: { var: _health_cmds_raw }

    - name: Push simulated health summary (Linux)
      ansible.builtin.set_fact:
        start_health_summary: "{{ (start_health_summary | default([])) + [ {'component': 'all', 'start_fail': false, 'health_fail': false} ] }}"
      when: ansible_check_mode | default(false)

- block:
    - name: Debug rendered health commands (wrapper)
      ansible.builtin.debug:
        msg: "Executing health check (wrapper): {{ item | replace('{{timeout}}', health_timeout | string) | replace('{{retry}}', health_retry | string) | replace('{{retryDelay}}', health_retry_delay | string) }}"
      loop: "{{ _health_cmds_raw }}"
      vars:
        health_timeout: "{{ timeout | default(30) }}"
        health_retry: "{{ retry | default(5) }}"
        health_retry_delay: "{{ retryDelay | default(2) }}"

    - name: Health check (Linux via wrapper)
      ansible.builtin.script:
        cmd: roles/deploy_service/files/health_check.sh {{ item }}
        executable: /bin/bash
      loop: "{{ _health_cmds_b64 }}"
      register: _health_out
      failed_when: false
      changed_when: false
      environment:
        HC_TIMEOUT: "{{ timeout | default(30) }}"
        HC_DEBUG: "{{ (options.DEBUG | default(false)) | bool | ternary('1','0') }}"

    - name: Parse wrapper JSON from health results
      ansible.builtin.set_fact:
        _parsed_health: "{{ _health_out.results | default([]) | parse_health_results }}"

    - name: Collect failed health results
      ansible.builtin.set_fact:
        _failed_health_results: "{{ _parsed_health | selectattr('rc','defined') | selectattr('rc','ne',0) | list }}"
      when: (_parsed_health | selectattr('rc','defined') | selectattr('rc','ne',0) | list | length) > 0

    - name: Build failed health details
      ansible.builtin.set_fact:
        _failed_health_details: >-
          {{
            (_failed_health_details | default([]))
            + [ {
                  'item': (item.json.repaired | default(item.json.original | default(''))),
                  'original_command': (item.json.original | default('')),
                  'rc': item.rc,
                  'stdout': (item.stdout | default('')) | trim,
                  'stderr': (item.stderr | default('')) | trim
                } ]
          }}
      loop: "{{ _failed_health_results }}"
      when: _failed_health_results is defined

    - name: Debug failed health checks (rc/stdout/stderr)
      ansible.builtin.debug:
        var: _failed_health_details
      when: _failed_health_details is defined and _failed_health_details | length > 0

    - name: Push health summary (Linux) - record failure before terminating
      ansible.builtin.set_fact:
        start_health_summary: >-
          {{ (start_health_summary | default([])) + [ {'component': 'all', 'start_fail': false, 'health_fail': (_health_out is defined and (_health_out.results | default([]) | selectattr('rc','defined') | selectattr('rc','ne',0) | list | length) > 0) | bool } ] }}
      when: not (ansible_check_mode | default(false))

    - name: Fail if any health checks failed
      ansible.builtin.fail:
        msg: |
          HEALTH CHECK FAILURES on {{ inventory_hostname }}:
          ===================================================
          
          {{ _failed_health_details | length }} health check(s) failed:
          
          {% for failure in _failed_health_details %}
          FAILED COMMAND {{ loop.index }}:
          Template: {{ failure.original_command }}
          Rendered: {{ failure.item }}
          Exit Code: {{ failure.rc }}
          {% if failure.stdout | length > 0 %}
          Standard Output:
          {{ failure.stdout | indent(2) }}
          {% else %}
          Standard Output: (empty)
          {% endif %}
          {% if failure.stderr | length > 0 %}
          Standard Error:
          {{ failure.stderr | indent(2) }}
          {% else %}
          Standard Error: (empty)
          {% endif %}
          
          {% endfor %}
          CAUSE: Health checks indicate services are not running or responding properly.
          This will terminate the playbook per fail-fast orchestration requirements.
      when: _failed_health_details is defined and _failed_health_details | length > 0
