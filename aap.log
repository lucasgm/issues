Identity added: /runner/artifacts/10454/ssh_key_data (svcdplyaap@intcx.net)
SSH password: 
[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details

PLAY [Ingest exec plan and build host phase maps] ******************************

TASK [Load options (for PROXY/ENABLEREPO/DISABLEREPO)] *************************
ok: [localhost]

TASK [Read execplan.yml] *******************************************************
ok: [localhost]

TASK [Derive component name lists and dependency groups] ***********************
ok: [localhost]

TASK [Detect presence of action-specific dependency fields] ********************
ok: [localhost]

TASK [Detect presence of INSTALL-specific dependency fields] *******************
ok: [localhost]

TASK [Build INSTALL gating dependency map (action-aware)] **********************
skipping: [localhost]

TASK [Initialize INSTALL level computation state] ******************************
skipping: [localhost]

TASK [Iteratively compute INSTALL dependency levels] ***************************
skipping: [localhost] => (item=install-levels iteration 0) 
skipping: [localhost] => (item=install-levels iteration 1) 
skipping: [localhost]

TASK [Assert INSTALL dependency graph is acyclic] ******************************
skipping: [localhost]

TASK [Persist INSTALL levels and restore comp_deps_map for START/HEALTH computation] ***
skipping: [localhost]

TASK [Build START gating dependency map (action-aware)] ************************
skipping: [localhost]

TASK [Build START gating dependency map (fallback: generic dependsOn names)] ***
ok: [localhost]

TASK [Initialize START/HEALTH level computation state] *************************
ok: [localhost]

TASK [Iteratively compute START/HEALTH dependency levels] **********************
included: /runner/project/roles/deploy_service/tasks/compute_levels_step.yml for localhost => (item=start-levels iteration 0)
included: /runner/project/roles/deploy_service/tasks/compute_levels_step.yml for localhost => (item=start-levels iteration 1)

TASK [Compute ready components for this iteration] *****************************
ok: [localhost]

TASK [Advance level state if any ready] ****************************************
ok: [localhost]

TASK [Compute ready components for this iteration] *****************************
ok: [localhost]

TASK [Advance level state if any ready] ****************************************
skipping: [localhost]

TASK [Assert START/HEALTH dependency graph is acyclic] *************************
ok: [localhost] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [Compose yum repo flags] **************************************************
ok: [localhost]

TASK [Normalize Artifactory vars for cache] ************************************
ok: [localhost]

TASK [Build list of unique GAVC keys] ******************************************
ok: [localhost]

TASK [Initialize Artifactory URL cache] ****************************************
ok: [localhost]

TASK [Query Artifactory for GAVC keys] *****************************************
ok: [localhost] => (item=com.theice.rop.edgeservice:ICErop_edgeservice:0.0.34:rpm)

TASK [Build final_url_cache from responses] ************************************
ok: [localhost]

TASK [Build dynamic host list from serverFilters] ******************************
ok: [localhost]

TASK [Fail if no hosts] ********************************************************
ok: [localhost] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [Build per-host phase map (STOP/UNINSTALL/DOWNLOAD/INSTALL/START/HEALTH_CHECK)] ***
ok: [localhost]

TASK [Register dynamic hosts with per-host variables] **************************
changed: [localhost] => (item=m4s-d545-ifroes-01)

PLAY [STOP phase (parallel roots, then sequential)] ****************************

TASK [ansible.builtin.setup] ***************************************************
ok: [m4s-d545-ifroes-01]

TASK [Stop (Linux) — parallel dependency-free components] **********************

TASK [deploy_service : Build stop/stopHealth (Linux)] **************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : (check) would stop (Linux)] *****************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : (check) would verify stopped (Linux)] *******************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Stop services (Linux)] **********************************
changed: [m4s-d545-ifroes-01] => (item=sudo /usr/bin/systemctl stop rop_edgeservice)

TASK [deploy_service : Verify stopped (Linux)] *********************************
ok: [m4s-d545-ifroes-01] => (item=! systemctl status rop_edgeservice)

TASK [Stop (Windows) — parallel dependency-free components] ********************
skipping: [m4s-d545-ifroes-01]

TASK [Stop — sequential remainder (component-ordered)] *************************
skipping: [m4s-d545-ifroes-01]

PLAY [UNINSTALL phase (parallel roots, then sequential)] ***********************
[WARNING]: Using any_errors_fatal with the free strategy is not supported, as
tasks are executed independently on each host

TASK [ansible.builtin.setup] ***************************************************
ok: [m4s-d545-ifroes-01]

TASK [Uninstall — parallel dependency-free components (Linux)] *****************
skipping: [m4s-d545-ifroes-01]

TASK [Uninstall — parallel dependency-free components (Windows)] ***************
skipping: [m4s-d545-ifroes-01]

TASK [Uninstall — sequential remainder (component-ordered)] ********************
skipping: [m4s-d545-ifroes-01]

PLAY [DOWNLOAD phase (parallel roots, then sequential)] ************************

TASK [ansible.builtin.setup] ***************************************************
ok: [m4s-d545-ifroes-01]

TASK [Download artifacts — parallel dependency-free components] ****************

TASK [deploy_service : ansible.builtin.setup] **********************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Reset async job list for this service] ******************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Build download list] ************************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Download each container (check-safe include)] ***********
included: /runner/project/roles/deploy_service/tasks/download_artifact.yml for m4s-d545-ifroes-01 => (item=ICErop_edgeservice:0.0.34)

TASK [deploy_service : Gather minimal facts (for os_family)] *******************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Normalise Artifactory vars] *****************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Derive artifact id and extension] ***********************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Build cache key for this artefact] **********************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Try Artifactory URL from localhost cache] ***************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Determine OS family (lowercased)] ***********************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Compute destination directory] **************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Compute filename] ***************************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Compute full destination path] **************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Assert dest_path is a valid string] *********************
ok: [m4s-d545-ifroes-01] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [deploy_service : ansible.builtin.debug] **********************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : ansible.builtin.set_fact] *******************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Build GAVC search URL (no whitespace)] ******************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Search Artifactory (GAVC)] ******************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Get first downloadable URL] *****************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Fail early if nothing found] ****************************
ok: [m4s-d545-ifroes-01] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [deploy_service : Download artefact (Linux)] ******************************
changed: [m4s-d545-ifroes-01]

TASK [deploy_service : Track async download job] *******************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Mark download result] ***********************************
ok: [m4s-d545-ifroes-01]
FAILED - RETRYING: [m4s-d545-ifroes-01]: Wait for all async downloads to finish (450 retries left).

TASK [deploy_service : Wait for all async downloads to finish] *****************
changed: [m4s-d545-ifroes-01] => (item=None)
changed: [m4s-d545-ifroes-01]

TASK [deploy_service : Build jobId -> dest map] ********************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Collate completed RPM downloads] ************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Record completed RPM paths] *****************************
ok: [m4s-d545-ifroes-01]

TASK [Download artifacts — sequential remainder (component-ordered)] ***********
skipping: [m4s-d545-ifroes-01]

PLAY [INSTALL roots (level 0, parallel)] ***************************************

TASK [ansible.builtin.setup] ***************************************************
ok: [m4s-d545-ifroes-01]

TASK [Install root components (Linux)] *****************************************
skipping: [m4s-d545-ifroes-01]

TASK [Install root components (Windows)] ***************************************
skipping: [m4s-d545-ifroes-01]

PLAY [INSTALL phase (legacy root+sequential)] **********************************

TASK [ansible.builtin.setup] ***************************************************
ok: [m4s-d545-ifroes-01]

TASK [Host-wide install (Linux) — legacy roots] ********************************

TASK [deploy_service : Collect RPM paths and INSTALL hooks (Linux)] ************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Prefer RPM paths captured during DOWNLOAD (if any)] *****
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Normalize proxy value] **********************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Build proxy flag and repo flags] ************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Derive package NAMES from RPM files] ********************
ok: [m4s-d545-ifroes-01] => (item=/tmp/ICErop_edgeservice-0.0.34.rpm)

TASK [deploy_service : Derive package NEVRs from RPM files] ********************
ok: [m4s-d545-ifroes-01] => (item=/tmp/ICErop_edgeservice-0.0.34.rpm)

TASK [deploy_service : Collect unique package names and file NEVRs] ************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Check which package names are already installed] ********
ok: [m4s-d545-ifroes-01] => (item=ICErop_edgeservice)

TASK [deploy_service : Build list of installed package names] ******************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Get installed NEVRs for those names] ********************
ok: [m4s-d545-ifroes-01] => (item=ICErop_edgeservice)

TASK [deploy_service : Collect installed NEVRs (unique)] ***********************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Build rpm join lists] ***********************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Choose removal candidates (NEVRs preferred, else names)] ***
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Join removal candidate list (no quotes, no empties)] ****
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Build remove + install/reinstall commands (yum only)] ***
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : DEBUG (temp): planned remove/install commands + inputs] ***
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : (check) BEFORE INSTALL hooks to run] ********************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : (check) Would run remove + yum install (with reinstall fallback)] ***
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : (check) AFTER INSTALL hooks to run] *********************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Record simulated install summary (Linux, check mode)] ***
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : BEFORE INSTALL hooks] ***********************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Skip if no RPMs to install on this host] ****************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : DEBUG before-remove: installed state for target names] ***
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Remove currently-installed packages (NEVRs preferred, fallback to names)] ***
changed: [m4s-d545-ifroes-01]

TASK [deploy_service : DEBUG remove result (rc/stdout/stderr)] *****************
ok: [m4s-d545-ifroes-01] => {
    "msg": "rc: 0\\nstdout:\\npkg.preuncheck is set to off, ignore all preremove checks.\\n  Removing sudo include file for: svc_ropworker\\n  Removing application directory: /var/opt/rop_edge\\nstderr:\\n+ /usr/bin/sudo rpm -e --nodeps ICErop_edgeservice-0.0.37-1.noarch\\n  + '[' -f /tmp/FORCEREMOVAL ']'\\n  ++ uname\\n  + OSTYPE=Linux\\n  + INSTANCES=0\\n  + '[' 0 -gt 0 ']'\\n  + APPDIR=/var/opt/rop_edge\\n  + ARTIFACTID=ICErop_edgeservice\\n  + CRONFILE=\\n  + GID=8021\\n  + GROUP=svc_ropworker\\n  + HOMEDIR=/home/svc_ropworker\\n  + POSTINSTALLHOOK=postinstallhook.sh\\n  + POSTREMOVEHOOK=\\n  + PRECHECK=off\\n  + PREINSTALLHOOK=\\n  + PREREMOVEHOOK=\\n  + PREUNCHECK=off\\n  + RCNAME=\\n  + RMAD=\\n  + SCRIPTS=\\n  + SYMLINK=\\n  + USER=svc_ropworker\\n  + USID=8021\\n  + SYSTEMD=rop_edgeservice\\n  + flatAntParam\\n  + set +x\\n  + APPLOGDIR=/var/opt/rop_edge/logs\\n  + '[' Linux = SunOS ']'\\n  + CMD_TR=/usr/bin/tr\\n  ++ echo off\\n  ++ /usr/bin/tr '[:upper:]' '[:lower:]'\\n  + varPRCK=off\\n  + '[' offX '!=' offX ']'\\n  + echo 'pkg.preuncheck is set to off, ignore all preremove checks.'\\n  + check_service_files\\n  + [[ -z rop_edgeservice ]]\\n  ++ systemctl is-enabled rop_edgeservice\\n  + is_service_enabled=disabled\\n  + [[ disabled == \\\\e\\\\n\\\\a\\\\b\\\\l\\\\e\\\\d ]]\\n  + systemdfile=/usr/lib/systemd/system/rop_edgeservice.service\\n  + [[ -f /usr/lib/systemd/system/rop_edgeservice.service ]]\\n  + rm /usr/lib/systemd/system/rop_edgeservice.service\\n  + systemctl daemon-reload\\n  + '[' -n /var/opt/rop_edge/ ']'\\n  + runHook\\n  + '[' -f /var/opt/rop_edge/ ']'\\n  + exit 0\\n  warning: file /var/opt/rop_edge/environments/m4s-u8/config/scheduler.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/m4s-u8/config/config.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/m4s-pr/config/scheduler.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/m4s-pr/config/config.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/m4s-i4/config/scheduler.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/m4s-i4/config/config.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/m4s-d545/config/scheduler.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/m4s-d545/config/config.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/c6s-pr/config/scheduler.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/c6s-pr/config/config.json: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/all/version_file: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/all/rop_edgeservice.service: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/all/postinstallhook.sh: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/all/env_file: remove failed: No such file or directory\\n  warning: file /var/opt/rop_edge/environments/all/docs/swagger.json: remove failed: No such file or directory\\n  + INSTANCES=0\\n  + '[' 0 -gt 0 ']'\\n  + APPDIR=/var/opt/rop_edge\\n  + ARTIFACTID=ICErop_edgeservice\\n  + CRONFILE=\\n  + GID=8021\\n  + GROUP=svc_ropworker\\n  + HOMEDIR=/home/svc_ropworker\\n  + POSTINSTALLHOOK=postinstallhook.sh\\n  + POSTREMOVEHOOK=\\n  + PREINSTALLHOOK=\\n  + PREREMOVEHOOK=\\n  + RCNAME=\\n  + RMAD=\\n  + SCRIPTS=\\n  + SYMLINK=\\n  + USER=svc_ropworker\\n  + USID=8021\\n  + SYSTEMD=rop_edgeservice\\n  + STARTSCRIPT=\\n  + STARTONBOOT=\\n  + PACKAGENAME=ICErop_edgeservice\\n  + flatAntParam\\n  + set +x\\n  + MAIN_SUDOERS=/etc/sudoers\\n  ++ uname -a\\n  ++ cut -d ' ' -f 1\\n  + OS=Linux\\n  + '[' Linux = SunOS ']'\\n  + SUDOERSINC=/etc/sudoers.d\\n  + INSTANCES=0\\n  + '[' 0 -gt 0 ']'\\n  + SYMLINK=\\n  + '[' -n '' ']'\\n  + '[' -f /etc/sudoers.d/ICErop_edgeservice ']'\\n  + echo 'Removing sudo include file for: svc_ropworker'\\n  + rm /etc/sudoers.d/ICErop_edgeservice\\n  + '[' -f /etc/rc2.d/ ']'\\n  + '[' x = x ']'\\n  + echo 'Removing application directory: /var/opt/rop_edge'\\n  + '[' -n /var/opt/rop_edge ']'\\n  + '[' /var/opt/rop_edge '!=' / ']'\\n  + '[' /var/opt/rop_edge '!=' /var/opt ']'\\n  + rm -rf /var/opt/rop_edge\\n"
}

TASK [deploy_service : Verify removals (non-fatal check)] **********************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : DEBUG after-remove verification] ************************
ok: [m4s-d545-ifroes-01] => {
    "msg": "remove_verify_rc: 0\\nremove_verify_stdout:\\n\\nremove_verify_stderr:\\n"
}

TASK [deploy_service : Decide install mode (install vs reinstall)] *************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : Run yum install (fresh, after successful removals)] *****
changed: [m4s-d545-ifroes-01]

TASK [deploy_service : Run yum reinstall (same-version fallback when removal didn’t occur)] ***
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : DEBUG install/reinstall result (rc/stdout/stderr)] ******
ok: [m4s-d545-ifroes-01] => {
    "msg": "reinstall_mode: False\\nrc: n/a\\nstdout:\\n\\nstderr:\\n"
}

TASK [deploy_service : Fail install if yum returned non-zero] ******************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : DEBUG after-install: installed state for target names] ***
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : AFTER INSTALL hooks] ************************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Record install summary (Linux)] *************************
ok: [m4s-d545-ifroes-01]

TASK [Host-wide install (Windows) — legacy roots] ******************************
skipping: [m4s-d545-ifroes-01]

PLAY [ROOT START + HEALTH (parallel for no-deps)] ******************************

TASK [ansible.builtin.setup] ***************************************************
ok: [m4s-d545-ifroes-01]

TASK [Start root services (Linux)] *********************************************

TASK [deploy_service : Build start & hooks (Linux)] ****************************
ok: [m4s-d545-ifroes-01]

TASK [deploy_service : (check) BEFORE start hooks] *****************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : (check) would start (Linux)] ****************************
ok: [m4s-d545-ifroes-01] => {
    "_start_cmds": [
        "sudo /usr/bin/systemctl start rop_edgeservice"
    ]
}

TASK [deploy_service : (check) AFTER start hooks] ******************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Push simulated start summary (Linux)] *******************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : BEFORE start hooks] *************************************
skipping: [m4s-d545-ifroes-01]

TASK [deploy_service : Start services (Linux)] *********************************
changed: [m4s-d545-ifroes-01] => (item=sudo /usr/bin/systemctl start rop_edgeservice)

TASK [deploy_service : Build failed start details] *****************************
fatal: [m4s-d545-ifroes-01]: FAILED! => {"msg": "template error while templating string: expected token ',', got 'for'. String: {{ [ {'item': r.item, 'rc': r.rc, 'stdout': (r.stdout | default('')) | trim, 'stderr': (r.stderr | default('')) | trim} for r in (_start_out.results | default([]) | rejectattr('rc','eq',0) | list) ] }}. expected token ',', got 'for'"}

PLAY RECAP *********************************************************************
localhost                  : ok=23   changed=1    unreachable=0    failed=0    skipped=7    rescued=0    ignored=0   
m4s-d545-ifroes-01         : ok=57   changed=6    unreachable=0    failed=1    skipped=32   rescued=0    ignored=0   
