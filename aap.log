#roles/deploy_service/tasks/stop_only_linux.yml
- name: Build stop/stopHealth (Linux)
  ansible.builtin.set_fact:
    _stop: >-
      {{
        phase_services | map(attribute='containers') | sum(start=[])
        | map(attribute='serviceCommands') | select('defined')
        | map(attribute='stop') | reject('equalto', None)
        | map('trim') | reject('equalto','') | list
      }}
    _stophealth: >-
      {{
        phase_services | map(attribute='containers') | sum(start=[])
        | map(attribute='serviceCommands') | select('defined')
        | map(attribute='stopHealth') | reject('equalto', None)
        | map('trim') | reject('equalto','') | list
      }}

- name: Normalize stop commands for become (strip leading sudo)
  ansible.builtin.set_fact:
    _stop_clean: >-
      {{
        _stop
        | map('regex_replace', '^(\\s*)(?:/usr/bin/)?sudo\\s+', '\\1')
        | list
      }}

- name: DEBUG stop commands (orig vs executed)
  ansible.builtin.debug:
    msg: |
      original_stop_cmds: {{ _stop | to_nice_json }}
      executed_stop_cmds: {{ _stop_clean | to_nice_json }}
  when: options.DEBUG | default(false)

- block:
    - name: (check) would stop (Linux)
      ansible.builtin.debug: { var: _stop }
    - name: (check) would verify stopped (Linux)
      ansible.builtin.debug: { var: _stophealth }
  when: ansible_check_mode | default(false)

- block:
    - name: Stop services (Linux) â€” using plan-defined commands
      ansible.builtin.shell: "{{ item }}"
      args: { executable: /bin/bash }
      loop: "{{ _stop_clean }}"
      register: _stop_out
      become: true
      failed_when: false
      changed_when: true

    - name: Verify stopped (Linux)
      ansible.builtin.shell: "{{ item }}"
      args: { executable: /bin/bash }
      loop: "{{ _stophealth }}"
      register: _stop_health_out
      failed_when: false
      changed_when: false
  when: not (ansible_check_mode | default(false))
