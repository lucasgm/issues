---
# roles/deploy_service/tasks/start_health_linux.yml
# Assumes "service" var is the current service object for this host (as in your include).
# Assumes "svc_obj" is passed by the include.

# 1) Capture the service object you passed from the role include
- name: Capture service object (Linux)
  ansible.builtin.set_fact:
    _svc_obj: "{{ svc_obj | default({}, true) }}"
  no_log: true
  changed_when: false

# 2) Extract the serviceCommands list
- name: Extract serviceCommands
  ansible.builtin.set_fact:
    _svc_cmds: "{{ (_svc_obj.containers | default([])) | map(attribute='serviceCommands') | list }}"
  changed_when: false

# 3) Build command lists
- name: Build linux start/stop/health command lists
  ansible.builtin.set_fact:
    _linux_stop_cmds:       "{{ _svc_cmds | selectattr('stop', 'defined')       | map(attribute='stop')       | map('trim') | reject('equalto','') | list }}"
    _linux_start_cmds:      "{{ _svc_cmds | selectattr('start','defined')       | map(attribute='start')      | map('trim') | reject('equalto','') | list }}"
    _linux_health_cmds:     "{{ _svc_cmds | selectattr('health','defined')      | map(attribute='health')     | map('trim') | reject('equalto','') | list }}"
    _linux_stophealth_cmds: "{{ _svc_cmds | selectattr('stopHealth','defined')  | map(attribute='stopHealth') | map('trim') | reject('equalto','') | list }}"
  changed_when: false

# - name: 🛑 Stop services (best effort, skip if none)
#   ansible.builtin.shell: "{{ item }}"
#   args: { executable: /bin/bash }
#   loop: "{{ _linux_stop_cmds }}"
#   loop_control: { label: "{{ item }}" }
#   register: _stop_out
#   ignore_errors: true
#   changed_when: true
#   when: _linux_stop_cmds | length > 0

# - name: Verify stopped (optional) — stopHealth
#   ansible.builtin.shell: "{{ item }}"
#   args: { executable: /bin/bash }
#   loop: "{{ _linux_stophealth_cmds }}"
#   loop_control: { label: "{{ item }}" }
#   register: _stophealth_out
#   ignore_errors: true
#   changed_when: false
#   when: _linux_stophealth_cmds | length > 0

# Collect start results but DON'T fail yet; evaluate after summary.
- name: ▶️ Start services (skip if none; collect results)
  ansible.builtin.shell: "{{ item }}"
  args: { executable: /bin/bash }
  loop: "{{ _linux_start_cmds }}"
  loop_control: { label: "{{ item }}" }
  register: _start_out
  changed_when: true
  failed_when: false
  when: _linux_start_cmds | length > 0

# Health once (no retry)
- name: ❤️ Health check (once, no retry)
  ansible.builtin.shell: "{{ item }}"
  args: { executable: /bin/bash }
  loop: "{{ _linux_health_cmds }}"
  loop_control:
    label: "{{ (item | regex_replace('\\s+', ' '))[:80] ~ ('…' if (item|length) > 80 else '') }}"
  register: _health_out
  changed_when: false
  failed_when: false
  when: _linux_health_cmds | length > 0

# Summarise + fail-fast
- name: Classify start/health results
  ansible.builtin.set_fact:
    _start_fail_cmds: >-
      {{
        (_start_out.results | default([]))
        | selectattr('rc','defined')
        | rejectattr('rc','eq',0)
        | map(attribute='item') | list
      }}
    _start_ok_cmds: >-
      {{
        (_start_out.results | default([]))
        | selectattr('rc','defined')
        | selectattr('rc','eq',0)
        | map(attribute='item') | list
      }}
    _health_fail_cmds: >-
      {{
        (_health_out.results | default([]))
        | selectattr('rc','defined')
        | rejectattr('rc','eq',0)
        | map(attribute='item') | list
      }}
    _health_ok_cmds: >-
      {{
        (_health_out.results | default([]))
        | selectattr('rc','defined')
        | selectattr('rc','eq',0)
        | map(attribute='item') | list
      }}

- name: Push per-host start/health summary (Linux)
  ansible.builtin.set_stats:
    data:
      start_health_summary: >-
        {{ (hostvars[inventory_hostname].start_health_summary | default([])) + [ {
          'service'        : _svc_obj.name | default('unknown'),
          'stop_cmds'      : _linux_stop_cmds,
          'start_cmds'     : _linux_start_cmds,
          'health_cmds'    : _linux_health_cmds,
          'start_ok'       : _start_ok_cmds,
          'start_fail'     : _start_fail_cmds,
          'health_ok'      : _health_ok_cmds,
          'health_fail'    : _health_fail_cmds
        } ] }}
  changed_when: false

- name: Abort now if any start/health failures (Linux)
  ansible.builtin.fail:
    msg: >-
      {{ _svc_obj.name | default('unknown') }} failed:
      start={{ _start_fail_cmds | length }}; health={{ _health_fail_cmds | length }}.
      Start failed: {{ _start_fail_cmds | join(' | ') }}
      Health failed: {{ _health_fail_cmds | join(' | ') }}
  when: >
    (_start_fail_cmds | default([]) | length) > 0
    or
    (_health_fail_cmds | default([]) | length) > 0
